import{r as p,c as o,a as s,b as t,F as c,e as a,d as n,o as l}from"./app.260f48b5.js";import{_ as r}from"./plugin-vue_export-helper.5a098b48.js";const i={},u=a(`<h1 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference" aria-hidden="true">#</a> API Reference</h1><h3 id="class-data" tabindex="-1"><a class="header-anchor" href="#class-data" aria-hidden="true">#</a> class <code>Data</code></h3><p>Base class for domain models. Should be extended with a set of class fields that describe the shape of desired model.</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Data <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;dataclass&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Project</span> <span class="token keyword">extends</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Untitled Project&quot;</span><span class="token punctuation">;</span>
  createdBy<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  createdAt<span class="token operator">:</span> Date <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="static-create-values" tabindex="-1"><a class="header-anchor" href="#static-create-values" aria-hidden="true">#</a> static <code>create(values)</code></h3><p>Once extended, data class can be instantiated with a new data. That&#39;s the way to get a unique immutable persistent model.</p><h4 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h4>`,8),d=s("code",null,"values",-1),k=n(" ("),m=s("em",null,"Object",-1),h=n("): POJO which shape satisfy the contract described during class extension. If you use "),b={href:"https://flow.org",target:"_blank",rel:"noopener noreferrer"},g=n("Flow"),f=n(", it will warn you about the mistakes."),_=a(`<h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p>(<em>Data</em>): an instance of your data class with all the defined fields accessible as in the plain object. Properties are read only.</p><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token keyword">extends</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>
  model<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  manufacturer<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> vehicle <span class="token operator">=</span> Vehicle<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> manufacturer<span class="token operator">:</span> <span class="token string">&quot;Tesla&quot;</span><span class="token punctuation">,</span> model<span class="token operator">:</span> <span class="token string">&quot;S&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &gt; Vehicle { manufacturer: &#39;Tesla&#39;, model: &#39;S&#39; }</span>

vehicle<span class="token punctuation">.</span>manufacturer<span class="token punctuation">;</span>
<span class="token comment">// &gt; &#39;Tesla&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="method-copy-values" tabindex="-1"><a class="header-anchor" href="#method-copy-values" aria-hidden="true">#</a> method <code>copy(values)</code></h3><p>Create new immutable instance based on an existent one. Since properties are read only, that&#39;s the way to provide an updated model&#39;s fields to a consumer keeping the rest unchanged.</p><h4 id="arguments-1" tabindex="-1"><a class="header-anchor" href="#arguments-1" aria-hidden="true">#</a> Arguments</h4><ol><li><code>values</code> (<em>Data</em>): POJO that includes new values that you want to change. Properties should satisfy the contract described by the class.</li></ol><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p>(<em>Data</em>): new instance of the same type and with new values.</p><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Anonymous&quot;</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;email@example.com&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Liza&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &gt; User { name: &#39;Liza&#39;, email: &#39;email@example.com&#39; }</span>

<span class="token keyword">let</span> updated <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token operator">:</span> <span class="token string">&quot;liza@example.com&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &gt; User { name: &#39;Liza&#39;, email: &#39;liza@example.com&#39; }</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="method-equals-other" tabindex="-1"><a class="header-anchor" href="#method-equals-other" aria-hidden="true">#</a> method <code>equals(other)</code></h3><p>Since immutable instances always have not equal references, there should be a way to compare the actual values.</p><h4 id="arguments-2" tabindex="-1"><a class="header-anchor" href="#arguments-2" aria-hidden="true">#</a> Arguments</h4><ol><li><code>other</code> (<em>Object</em>): a data object of the same class as a target one.</li></ol><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4>`,17),x=n("("),y=s("em",null,"Boolean",-1),q=n("): "),w=s("code",null,"false",-1),v=n(" if some field value is not "),D={href:"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6",target:"_blank",rel:"noopener noreferrer"},B=n("strictly equal"),O=n(" in both instances. "),j=s("code",null,"true",-1),P=n(" otherwise."),V=a(`<h4 id="example-3" tabindex="-1"><a class="header-anchor" href="#example-3" aria-hidden="true">#</a> Example</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token keyword">extends</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>
  size<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
  color<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> first <span class="token operator">=</span> Box<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">&quot;green&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> second <span class="token operator">=</span> Box<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> third <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

first <span class="token operator">===</span> second<span class="token punctuation">;</span>
<span class="token comment">// &gt; false</span>

first <span class="token operator">===</span> third<span class="token punctuation">;</span>
<span class="token comment">// &gt; false</span>

first<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &gt; false</span>

second<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &gt; true</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,2);function z(A,S){const e=p("OutboundLink");return l(),o(c,null,[u,s("ol",null,[s("li",null,[d,k,m,h,s("a",b,[g,t(e)]),f])]),_,s("p",null,[x,y,q,w,v,s("a",D,[B,t(e)]),O,j,P]),V],64)}var T=r(i,[["render",z]]);export{T as default};
