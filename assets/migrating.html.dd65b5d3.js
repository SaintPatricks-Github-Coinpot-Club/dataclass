import{r as t,c as i,a as e,b as n,w as c,F as p,d as s,e as o,o as d}from"./app.260f48b5.js";import{_ as l}from"./plugin-vue_export-helper.5a098b48.js";const h={},u=e("h1",{id:"migrating-from-v1-to-v2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#migrating-from-v1-to-v2","aria-hidden":"true"},"#"),s(" Migrating from v1 to v2")],-1),g=e("h2",{id:"the-class-name-and-import-type-has-been-changed",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#the-class-name-and-import-type-has-been-changed","aria-hidden":"true"},"#"),s(" The class name and import type has been changed")],-1),m=s("The library was created in 2017, long ago before "),f={href:"https://github.com/tc39/proposal-record-tuple",target:"_blank",rel:"noopener noreferrer"},_=s("Records & Tuples proposal"),k=s(' was created. The fact this proposal is moving towards being a part of the language means "Record" as a term gains very particular meaning for the ecosystem. Besides, '),b={href:"https://immutable-js.com/docs/v4.0.0/Record/",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"Immutable.Record",-1),y=s(" and "),w={href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",target:"_blank",rel:"noopener noreferrer"},x=s("TypeScript's Record"),T=s(" could potentially create confusion as well. Thus, the abstract class "),q=e("code",null,"Record",-1),R=s(" has been renamed to "),U=e("code",null,"Data",-1),D=s("."),S=o(`<p>Dataclass v1 exposed a single default export which seemed to work just fine for most of the cases. However, it can create additional burden for CommonJS code and require some unnecessary tricks from the bundlers. Thus, Dataclass v2 uses named export.</p><div class="language-diff ext-diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import Record from &quot;dataclass&quot;;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { Data } from &quot;dataclass&quot;;
</span></span></code></pre></div><h2 id="drop-typescript-generic-from-class-definitions" tabindex="-1"><a class="header-anchor" href="#drop-typescript-generic-from-class-definitions" aria-hidden="true">#</a> Drop TypeScript generic from class definitions</h2>`,3),j=s("Dataclass v1 required TypeScript classes to be generic due to "),M={href:"https://github.com/Microsoft/TypeScript/issues/5863",target:"_blank",rel:"noopener noreferrer"},N=s("polymorphic "),O=e("code",null,"this",-1),B=s(" for static members issue"),I=s(". The issue has not been resolved but in Dataclass v2 there was a change in typings that helped avoiding the issue in the first place. Now, the user's classes don't need to be generic."),L=o(`<div class="language-diff ext-diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">class User extends Record&lt;User&gt; {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">class User extends Data {
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> name: string = &quot;Anon&quot;;
</span></span>}
</code></pre></div><h2 id="use-static-method-create-instead-of-new-operator" tabindex="-1"><a class="header-anchor" href="#use-static-method-create-instead-of-new-operator" aria-hidden="true">#</a> Use static method <code>create()</code> instead of <code>new</code> operator</h2><p>Dataclass v2 uses new implementation for class instantiation due to some browser incompatibilities.</p><div class="language-diff ext-diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">let user = new User({ name: &quot;Ann&quot; });
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">let user = User.create({ name: &quot;Ann&quot; });
</span></span></code></pre></div><p>Moving to dataclass v2 will make use of <code>new</code> operator throwing runtime errors, suggesting to use static <code>create()</code> method instead.</p><h2 id="ensure-no-mutations-happening-in-the-code" tabindex="-1"><a class="header-anchor" href="#ensure-no-mutations-happening-in-the-code" aria-hidden="true">#</a> Ensure no mutations happening in the code</h2><p>While instance of data classes treated as immutable, the implementation still uses some safety precautions to ensure no mutations (accidental or intentional) can be made. In v1, when a prop is mutated, nothing happens, the value remains the same. The operation is basically ignored.</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &gt; 18</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><br><br><br></div></div><p>In v2, however, some additional precautions were made, to ensure that developers can spot bad code and mistakes. Mutating a property will now throw an error:</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught TypeError: &quot;age&quot; is read-only</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><br></div></div>`,10),V=s("This error comes from the use of "),z={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"Object.freeze()",-1),C=s(" which throws an error when there was an attempt to mutate an existing property and when the user tries to add new property to the object."),E=e("h2",{id:"make-sure-the-dependency-is-transpiled-if-necessary",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#make-sure-the-dependency-is-transpiled-if-necessary","aria-hidden":"true"},"#"),s(" Make sure the dependency is transpiled, if necessary")],-1),F=s("See "),G=s("Installation Guide & Troubleshooting"),J=s(" for more details.");function W(H,K){const a=t("OutboundLink"),r=t("RouterLink");return d(),i(p,null,[u,g,e("p",null,[m,e("a",f,[_,n(a)]),k,e("a",b,[v,n(a)]),y,e("a",w,[x,n(a)]),T,q,R,U,D]),S,e("p",null,[j,e("a",M,[N,O,B,n(a)]),I]),L,e("p",null,[V,e("a",z,[A,n(a)]),C]),E,e("p",null,[F,n(r,{to:"/guide/installation.html#troubleshooting"},{default:c(()=>[G]),_:1}),J])],64)}var X=l(h,[["render",W]]);export{X as default};
