import{e}from"./app.260f48b5.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const a={},n=e(`<h1 id="objects-equality" tabindex="-1"><a class="header-anchor" href="#objects-equality" aria-hidden="true">#</a> Objects Equality</h1><p>The biggest part of dataclasses flexibility is the fact they can be compared by the value they contain, rather than by the instances reference.</p><p>Let&#39;s consider an example:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Data <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;dataclass&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>
	x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	radius<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> circleA <span class="token operator">=</span> Circle<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> radius<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// let&#39;s assume the new value is coming from an outside source</span>
<span class="token keyword">let</span> circleB <span class="token operator">=</span> circleA<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> radius<span class="token operator">:</span> <span class="token function">getCircleRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u2026and now we need to check if the value actually changed</span>
<span class="token keyword">let</span> isEqual <span class="token operator">=</span> circleA<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>circleB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>This guide describes what happens when <code>target.equals(other)</code> is being called.</p><ol><li>The runtime does not check <code>other</code> for being the same data class as <code>target</code>. This is what supposed to be checked by the typing system (TypeScript or Flowtype) even before the code is executed.</li><li>The <code>equals()</code> method iterates over the properties of the <code>target</code> class and checks whether <code>target</code> or <code>other</code> has a custom value for the key. If at least on of them does, the values need to be compared.</li><li>If <code>target</code> has a custom value for a property, but <code>other</code> does not, the default value of the class will be compared to the custom value</li><li>If two values are not strictly equal (via <code>===</code> comparison), and both of the values are not nullish (i.e. neither <code>undefined</code> nor <code>null</code>), the method checks whether these values are data classes that also have <code>equals()</code> method. If so, the rest of comparison for these two values is delegated to their <code>equals()</code> method.</li><li>If the values are not data classes, <code>.valueOf()</code> method is used for both values to extract possible primitive representation. The resulting values are compared using <code>===</code> operator. If result is <code>false</code>, <code>equals()</code> method returns <code>false</code> and skip comparing the rest of the properties.</li><li>If none of changed properties are different in both <code>target</code> and <code>other</code>, <code>equals()</code> method returns <code>true</code>.</li></ol><p>The idea behind this algorithm attempts to find <code>equals()</code> of a dataclass properties is that you can create a data class that will be using another data class as a property.</p><p>The reason for using <code>valueOf()</code> for other types of properties is the fact that there are some data types in JavaScript that are actually value objects and should be compared by their value while having different reference. The prime example of it is <code>Date</code>. Instead of directly checking for values to be instanceof of <code>Date</code>, <code>equals()</code> method relies on the mechanism of <code>valueOf()</code> itself, allowing you to define custom <code>valueOf()</code> methods for any special data types that can be a part of data classes.</p>`,8);function t(o,c){return n}var r=s(a,[["render",t]]);export{r as default};
